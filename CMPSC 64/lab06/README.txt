1. The MIPS code is recursively splitting the array into two arrays based on average. For every unit of depth, the code first prints out the array passed as a function argument, then finds the average of this array. It then splits the array into two arrays (small_arr and big_arr) by iterating through the values and moving the ones less than or equal to the average to small_arr, and the ones greater than the average to big_arr. The recursion only stops when the depth reaches 0, or when the array being split only contains one element. It is also important to note that small_arr and big_arr for each recursive call are located on the stack (with the preallocated "buffer" space we defined).

2. If the code were to remain the same, with the only thing changed being the disaggregate function parameters we initially pass in, the space used in the stack will not change with array length, or array values, but it will change with depth value. At the beginning of main we allocate a default 400 byte "buffer" space for the small_arr and big_arr arrays to be stored throughout the recursive call, and the intent is that each recursive call can only allow for 80 of those bytes to be accessed at one time (although you could technically access more than 80 if the array length was longer than 10), but since we allocate a default buffer space, the length of the array or the values passed in will not alter the space used on the stack. However, the space will change when a higher/lower depth is used, since for each recursive call we allocate space on the stack to store the saved registers ($s0-$s7) as well as $ra, and the depth directly controls the amount of recursive calls that occur.
